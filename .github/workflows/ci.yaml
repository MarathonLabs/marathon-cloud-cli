name: cicd

permissions:
  contents: write

env:
  CICD_INTERMEDIATES_DIR: "_cicd-intermediates"
  MSRV_FEATURES: --no-default-features

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
    tags:
      - "*"

jobs:
  all-jobs:
    if: always() # Otherwise this job is skipped if the matrix job fails
    name: all-jobs
    runs-on: ubuntu-latest
    needs:
      - crate_metadata
      - ensure_cargo_fmt
      - min_version
      - documentation
      - cargo-audit
      - build
    steps:
      - run: jq --exit-status 'all(.result == "success")' <<< '${{ toJson(needs) }}'

  crate_metadata:
    name: Extract crate metadata
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Extract crate information
        id: crate_metadata
        run: |
          cargo metadata --no-deps --format-version 1 | jq -r '"name=" + .packages[0].name' | tee -a $GITHUB_OUTPUT
          cargo metadata --no-deps --format-version 1 | jq -r '"maintainer=" + .packages[0].authors[0]' | tee -a $GITHUB_OUTPUT
          cargo metadata --no-deps --format-version 1 | jq -r '"homepage=" + .packages[0].homepage' | tee -a $GITHUB_OUTPUT
          cargo metadata --no-deps --format-version 1 | jq -r '"msrv=" + .packages[0].rust_version' | tee -a $GITHUB_OUTPUT

          if [[ $GITHUB_REF =~ ^refs/tags/[0-9].* ]]; then
            VERSION=$(echo $GITHUB_REF | cut -d / -f 3)
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
          else
            cargo metadata --no-deps --format-version 1 | jq -r '"version=" + .packages[0].version' | tee -a $GITHUB_OUTPUT
          fi

    outputs:
      name: ${{ steps.crate_metadata.outputs.name }}
      version: ${{ steps.crate_metadata.outputs.version }}
      maintainer: ${{ steps.crate_metadata.outputs.maintainer }}
      homepage: ${{ steps.crate_metadata.outputs.homepage }}
      msrv: ${{ steps.crate_metadata.outputs.msrv }}

  ensure_cargo_fmt:
    name: Ensure 'cargo fmt' has been run
    runs-on: ubuntu-22.04
    steps:
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - uses: actions/checkout@v4
      - run: cargo fmt -- --check

  min_version:
    name: Minimum supported rust version
    runs-on: ubuntu-22.04
    needs: crate_metadata
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install rust toolchain (v${{ needs.crate_metadata.outputs.msrv }})
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ needs.crate_metadata.outputs.msrv }}
          components: clippy
      - name: Run clippy (on minimum supported rust version to prevent warnings we can't fix)
        run: cargo clippy --locked --all-targets ${{ env.MSRV_FEATURES }}
      - name: Run tests
        run: cargo test --locked ${{ env.MSRV_FEATURES }}

  documentation:
    name: Documentation
    runs-on: ubuntu-22.04
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Generate documentation
        run: mkdir -p target/release/man && OUT_DIR=target/release/man/ cargo run --bin marathon-cloud-mangen
      - name: Show man page
        run: man target/release/man/marathon-cloud.1

  cargo-audit:
    name: cargo audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: cargo install cargo-audit && cargo audit

  build:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    needs: crate_metadata
    strategy:
      fail-fast: false
      matrix:
        job:
          - {
              target: aarch64-unknown-linux-gnu,
              os: ubuntu-22.04,
              dpkg_arch: arm64,
              use-cross: true,
            }
          - {
              target: aarch64-unknown-linux-musl,
              os: ubuntu-22.04,
              dpkg_arch: arm64,
              use-cross: true,
            }
          - {
              target: arm-unknown-linux-gnueabihf,
              os: ubuntu-22.04,
              dpkg_arch: armhf,
              use-cross: true,
            }
          - {
              target: arm-unknown-linux-musleabihf,
              os: ubuntu-22.04,
              dpkg_arch: musl-linux-armhf,
              use-cross: true,
            }
          - { target: i686-pc-windows-msvc, os: windows-2022 }
          - {
              target: i686-unknown-linux-gnu,
              os: ubuntu-22.04,
              dpkg_arch: i686,
              use-cross: true,
            }
          - {
              target: i686-unknown-linux-musl,
              os: ubuntu-22.04,
              dpkg_arch: musl-linux-i686,
              use-cross: true,
            }
          - { target: "x86_64-apple-darwin,aarch64-apple-darwin", os: macos-13 }
          - { target: x86_64-pc-windows-msvc, os: windows-2022 }
          - {
              target: x86_64-unknown-linux-gnu,
              os: ubuntu-22.04,
              dpkg_arch: amd64,
              use-cross: true,
            }
          - {
              target: x86_64-unknown-linux-musl,
              os: ubuntu-22.04,
              dpkg_arch: musl-linux-amd64,
              use-cross: true,
            }
    env:
      BUILD_CMD: cargo
      CARGO_EDIT_VERSION: 0.12.2
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Check for release
        id: is-release
        shell: bash
        run: |
          unset IS_RELEASE ; if [[ $GITHUB_REF =~ ^refs/tags/[0-9].* ]]; then IS_RELEASE='true' ; fi
          echo "IS_RELEASE=${IS_RELEASE}" >> $GITHUB_OUTPUT
          unset VERSION
          VERSION=$(echo $GITHUB_REF | cut -d / -f 3)
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Install prerequisites
        shell: bash
        run: |
          case ${{ matrix.job.target }} in
            arm-unknown-linux-*) sudo apt-get -y update ; sudo apt-get -y install gcc-arm-linux-gnueabihf ;;
            aarch64-unknown-linux-gnu) sudo apt-get -y update ; sudo apt-get -y install gcc-aarch64-linux-gnu ;;
          esac

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.job.target }}

      - run: |
          cargo install --version ${{ env.CARGO_EDIT_VERSION }} cargo-edit
          cargo set-version ${{ steps.is-release.outputs.VERSION }}
        if: steps.is-release.outputs.IS_RELEASE

      - name: Install cross
        if: matrix.job.use-cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Overwrite build command env variable
        if: matrix.job.use-cross
        shell: bash
        run: echo "BUILD_CMD=cross" >> $GITHUB_ENV

      - name: Show version information (Rust, cargo, GCC)
        shell: bash
        run: |
          gcc --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V

      - name: Set binary name & path
        id: bin
        shell: bash
        run: |
          # Figure out suffix of binary
          EXE_suffix=""
          case ${{ matrix.job.target }} in
            *-pc-windows-*) EXE_suffix=".exe" ;;
          esac;

          # Setup paths
          BIN_NAME="${{ needs.crate_metadata.outputs.name }}${EXE_suffix}"
          # For macos we use universal binary
          if [[ ${{ matrix.job.os }} = macos-* ]]; then
            BIN_PATH="target/universal-apple-darwin/release/${BIN_NAME}"
          else
            BIN_PATH="target/${{ matrix.job.target }}/release/${BIN_NAME}"
          fi

          # Let subsequent steps know where to find the binary

          echo "BIN_PATH=${BIN_PATH}" >> $GITHUB_OUTPUT
          echo "BIN_NAME=${BIN_NAME}" >> $GITHUB_OUTPUT

      - name: Build
        shell: bash
        run: |
          if [[ ${{ matrix.job.os }} = macos-* ]]
          then
            # For macos we build universal binary
            for i in $(echo "${{ matrix.job.target}}" | sed "s/,/ /g")
            do
                $BUILD_CMD build --locked --release --target=$i
            done

            BIN_INTEL_PATH="target/x86_64-apple-darwin/release/${{ steps.bin.outputs.BIN_NAME}}"
            BIN_APPLE_PATH="target/aarch64-apple-darwin/release/${{ steps.bin.outputs.BIN_NAME}}"

            mkdir -p target/universal-apple-darwin/release
            lipo -create -output target/universal-apple-darwin/release/${{ steps.bin.outputs.BIN_NAME}} ${BIN_INTEL_PATH} ${BIN_APPLE_PATH}
          else
            $BUILD_CMD build --locked --release --target=${{ matrix.job.target }}
          fi

      - name: Set testing options
        id: test-options
        shell: bash
        run: |
          # test only library unit tests and binary for arm-type targets
          unset CARGO_TEST_OPTIONS
          unset CARGO_TEST_OPTIONS ; case ${{ matrix.job.target }} in arm-* | aarch64-*) CARGO_TEST_OPTIONS="--lib --bin ${{ needs.crate_metadata.outputs.name }}" ;; esac;
          echo "CARGO_TEST_OPTIONS=${CARGO_TEST_OPTIONS}" >> $GITHUB_OUTPUT

      - name: Run tests
        shell: bash
        run: |
          if [[ ${{ matrix.job.os }} = windows-* ]]; then
            powershell.exe -command "$BUILD_CMD test --locked --target=${{ matrix.job.target }} ${{ steps.test-options.outputs.CARGO_TEST_OPTIONS}}"
          elif [[ ${{ matrix.job.os }} = macos-* ]]; then
            # For macos universal binary we test using x86 since GitHub Actions do not yet support arm execution environment
            $BUILD_CMD test --locked --target=x86_64-apple-darwin ${{ steps.test-options.outputs.CARGO_TEST_OPTIONS}}
          else
            $BUILD_CMD test --locked --target=${{ matrix.job.target }} ${{ steps.test-options.outputs.CARGO_TEST_OPTIONS}}
          fi

      - name: Generate manpage
        shell: bash
        run: |
          if [[ ${{ matrix.job.os }} = windows-* ]]
          then
            mkdir -p target/release/man
            powershell.exe -command "$BUILD_CMD run --target=${{ matrix.job.target }} --bin marathon-cloud-mangen target\\release\\man"
          elif [[ ${{ matrix.job.os }} = macos-* ]]; then
            # For macos universal binary we test using x86 since GitHub Actions do not yet support arm execution environment
            mkdir -p target/release/man
            OUT_DIR=target/release/man/ $BUILD_CMD run --target=x86_64-apple-darwin --bin marathon-cloud-mangen
          else
            mkdir -p target/release/man
            OUT_DIR=target/release/man/ $BUILD_CMD run --target=${{ matrix.job.target }} --bin marathon-cloud-mangen
          fi

      - name: Generate completions
        shell: bash
        run: |
          if [[ ${{ matrix.job.os }} = windows-* ]]
          then
            mkdir -p target/release/autocomplete 
            powershell.exe -command "$BUILD_CMD -q run --target=${{ matrix.job.target }} -- completions bash" > target/release/autocomplete/marathon-cloud.bash
            powershell.exe -command "$BUILD_CMD -q run --target=${{ matrix.job.target }} -- completions fish" > target/release/autocomplete/marathon-cloud.fish
            powershell.exe -command "$BUILD_CMD -q run --target=${{ matrix.job.target }} -- completions powershell" > target/release/autocomplete/_marathon-cloud.ps1
            powershell.exe -command "$BUILD_CMD -q run --target=${{ matrix.job.target }} -- completions zsh" > target/release/autocomplete/marathon-cloud.zsh
          elif [[ ${{ matrix.job.os }} = macos-* ]]; then
            # For macos universal binary we test using x86 since GitHub Actions do not yet support arm execution environment
            mkdir -p target/release/autocomplete 
            $BUILD_CMD -q run --target=x86_64-apple-darwin -- completions bash > target/release/autocomplete/marathon-cloud.bash
            $BUILD_CMD -q run --target=x86_64-apple-darwin -- completions fish > target/release/autocomplete/marathon-cloud.fish
            $BUILD_CMD -q run --target=x86_64-apple-darwin -- completions powershell > target/release/autocomplete/_marathon-cloud.ps1
            $BUILD_CMD -q run --target=x86_64-apple-darwin -- completions zsh > target/release/autocomplete/marathon-cloud.zsh
          else
            mkdir -p target/release/autocomplete 
            $BUILD_CMD -q run --target=${{ matrix.job.target }} -- completions bash > target/release/autocomplete/marathon-cloud.bash
            $BUILD_CMD -q run --target=${{ matrix.job.target }} -- completions fish > target/release/autocomplete/marathon-cloud.fish
            $BUILD_CMD -q run --target=${{ matrix.job.target }} -- completions powershell > target/release/autocomplete/_marathon-cloud.ps1
            $BUILD_CMD -q run --target=${{ matrix.job.target }} -- completions zsh > target/release/autocomplete/marathon-cloud.zsh
          fi

      - name: Create tarball
        id: package
        shell: bash
        run: |
          PKG_suffix=".tar.gz" ; case ${{ matrix.job.target }} in *-pc-windows-*) PKG_suffix=".zip" ;; esac;
          if [[ ${{ matrix.job.os }} = macos-* ]]; then
            PKG_BASENAME=${{ needs.crate_metadata.outputs.name }}-v${{ needs.crate_metadata.outputs.version }}-universal-apple-darwin
          else
            PKG_BASENAME=${{ needs.crate_metadata.outputs.name }}-v${{ needs.crate_metadata.outputs.version }}-${{ matrix.job.target }}
          fi
          PKG_NAME=${PKG_BASENAME}${PKG_suffix}
          echo "PKG_NAME=${PKG_NAME}" >> $GITHUB_OUTPUT

          PKG_STAGING="${{ env.CICD_INTERMEDIATES_DIR }}/package"
          ARCHIVE_DIR="${PKG_STAGING}/${PKG_BASENAME}/"
          mkdir -p "${ARCHIVE_DIR}"
          mkdir -p "${ARCHIVE_DIR}/autocomplete"

          # Binary
          cp "${{ steps.bin.outputs.BIN_PATH }}" "$ARCHIVE_DIR"

          # README, LICENSE and CHANGELOG files
          cp "README.md" "LICENSE" "$ARCHIVE_DIR"

          # Man page
          cp 'target/release/man/marathon-cloud.1' "$ARCHIVE_DIR"

          # Autocompletion files
          cp 'target/release/autocomplete/marathon-cloud.bash' "$ARCHIVE_DIR/autocomplete/${{ needs.crate_metadata.outputs.name }}.bash"
          cp 'target/release/autocomplete/marathon-cloud.fish' "$ARCHIVE_DIR/autocomplete/${{ needs.crate_metadata.outputs.name }}.fish"
          cp 'target/release/autocomplete/_marathon-cloud.ps1' "$ARCHIVE_DIR/autocomplete/_${{ needs.crate_metadata.outputs.name }}.ps1"
          cp 'target/release/autocomplete/marathon-cloud.zsh' "$ARCHIVE_DIR/autocomplete/${{ needs.crate_metadata.outputs.name }}.zsh"

          # base compressed package
          pushd "${PKG_STAGING}/" >/dev/null
          case ${{ matrix.job.target }} in
            *-pc-windows-*) 7z -y a "${PKG_NAME}" "${PKG_BASENAME}"/* | tail -2 ;;
            *) tar czf "${PKG_NAME}" "${PKG_BASENAME}"/* ;;
          esac;
          popd >/dev/null

          # Let subsequent steps know where to find the compressed package
          echo "PKG_PATH=${PKG_STAGING}/${PKG_NAME}" >> $GITHUB_OUTPUT

      - name: Create Debian package
        id: debian-package
        shell: bash
        if: startsWith(matrix.job.os, 'ubuntu')
        run: |
          COPYRIGHT_YEARS="2023 - "$(date "+%Y")
          DPKG_STAGING="${{ env.CICD_INTERMEDIATES_DIR }}/debian-package"
          DPKG_DIR="${DPKG_STAGING}/dpkg"
          mkdir -p "${DPKG_DIR}"

          DPKG_BASENAME=${{ needs.crate_metadata.outputs.name }}
          DPKG_CONFLICTS=${{ needs.crate_metadata.outputs.name }}-musl
          case ${{ matrix.job.target }} in *-musl) DPKG_BASENAME=${{ needs.crate_metadata.outputs.name }}-musl ; DPKG_CONFLICTS=${{ needs.crate_metadata.outputs.name }} ;; esac;
          DPKG_VERSION=${{ needs.crate_metadata.outputs.version }}
          DPKG_ARCH="${{ matrix.job.dpkg_arch }}"
          DPKG_NAME="${DPKG_BASENAME}_v${DPKG_VERSION}_${DPKG_ARCH}.deb"
          echo "DPKG_NAME=${DPKG_NAME}" >> $GITHUB_OUTPUT

          # Binary
          install -Dm755 "${{ steps.bin.outputs.BIN_PATH }}" "${DPKG_DIR}/usr/bin/${{ steps.bin.outputs.BIN_NAME }}"

          # Man page
          install -Dm644 'target/release/man/marathon-cloud.1' "${DPKG_DIR}/usr/share/man/man1/${{ needs.crate_metadata.outputs.name }}.1"
          gzip -n --best "${DPKG_DIR}/usr/share/man/man1/${{ needs.crate_metadata.outputs.name }}.1"

          # Autocompletion files
          install -Dm644 'target/release/autocomplete/marathon-cloud.bash' "${DPKG_DIR}/usr/share/bash-completion/completions/${{ needs.crate_metadata.outputs.name }}"
          install -Dm644 'target/release/autocomplete/marathon-cloud.fish' "${DPKG_DIR}/usr/share/fish/vendor_completions.d/${{ needs.crate_metadata.outputs.name }}.fish"
          install -Dm644 'target/release/autocomplete/marathon-cloud.zsh' "${DPKG_DIR}/usr/share/zsh/vendor-completions/_${{ needs.crate_metadata.outputs.name }}"

          # README and LICENSE
          install -Dm644 "README.md" "${DPKG_DIR}/usr/share/doc/${DPKG_BASENAME}/README.md"
          install -Dm644 "LICENSE" "${DPKG_DIR}/usr/share/doc/${DPKG_BASENAME}/LICENSE"

          cat > "${DPKG_DIR}/usr/share/doc/${DPKG_BASENAME}/copyright" <<EOF
          Format: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
          Upstream-Name: ${{ needs.crate_metadata.outputs.name }}
          Source: ${{ needs.crate_metadata.outputs.homepage }}

          Files: *
          Copyright: ${{ needs.crate_metadata.outputs.maintainer }}
          Copyright: $COPYRIGHT_YEARS ${{ needs.crate_metadata.outputs.maintainer }}
          License: MIT
            Permission is hereby granted, free of charge, to any
            person obtaining a copy of this software and associated
            documentation files (the "Software"), to deal in the
            Software without restriction, including without
            limitation the rights to use, copy, modify, merge,
            publish, distribute, sublicense, and/or sell copies of
            the Software, and to permit persons to whom the Software
            is furnished to do so, subject to the following
            conditions:
            .
            The above copyright notice and this permission notice
            shall be included in all copies or substantial portions
            of the Software.
            .
            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
            ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
            TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
            PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
            SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
            CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
            OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
            IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
            DEALINGS IN THE SOFTWARE.
          EOF
            chmod 644 "${DPKG_DIR}/usr/share/doc/${DPKG_BASENAME}/copyright"

            # control file
            mkdir -p "${DPKG_DIR}/DEBIAN"
            cat > "${DPKG_DIR}/DEBIAN/control" <<EOF
          Package: ${DPKG_BASENAME}
          Version: ${DPKG_VERSION}
          Section: utils
          Priority: optional
          Maintainer: ${{ needs.crate_metadata.outputs.maintainer }}
          Homepage: ${{ needs.crate_metadata.outputs.homepage }}
          Architecture: ${DPKG_ARCH}
          Provides: ${{ needs.crate_metadata.outputs.name }}
          Conflicts: ${DPKG_CONFLICTS}
          Description: cat(1) clone with wings.
            A cat(1) clone with syntax highlighting and Git integration.
          EOF

          DPKG_PATH="${DPKG_STAGING}/${DPKG_NAME}"
          echo "DPKG_PATH=${DPKG_PATH}" >> $GITHUB_OUTPUT

          # build dpkg
          fakeroot dpkg-deb --build "${DPKG_DIR}" "${DPKG_PATH}"

      - name: "Artifact upload: tarball"
        uses: actions/upload-artifact@master
        with:
          name: ${{ steps.package.outputs.PKG_NAME }}
          path: ${{ steps.package.outputs.PKG_PATH }}

      - name: "Artifact upload: Debian package"
        uses: actions/upload-artifact@master
        if: steps.debian-package.outputs.DPKG_NAME
        with:
          name: ${{ steps.debian-package.outputs.DPKG_NAME }}
          path: ${{ steps.debian-package.outputs.DPKG_PATH }}

      - name: Publish archives and packages
        uses: softprops/action-gh-release@v2
        if: steps.is-release.outputs.IS_RELEASE
        with:
          files: |
            ${{ steps.package.outputs.PKG_PATH }}
            ${{ steps.debian-package.outputs.DPKG_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  homebrew:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check for release
        id: is-release
        shell: bash
        run: |
          unset IS_RELEASE ; if [[ $GITHUB_REF =~ ^refs/tags/[0-9].* ]]; then IS_RELEASE='true' ; fi
          echo "IS_RELEASE=${IS_RELEASE}" >> $GITHUB_OUTPUT
          unset VERSION
          VERSION=$(echo $GITHUB_REF | cut -d / -f 3)
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
        if: steps.is-release.outputs.IS_RELEASE
        with:
          repository: "Malinskiy/homebrew-tap"
          ref: "master"
          path: "homebrew-tap"
          token: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN }}
      - uses: ruby/setup-ruby@v1
        if: steps.is-release.outputs.IS_RELEASE
        with:
          ruby-version: 3.3
      - name: Render new formulae
        if: steps.is-release.outputs.IS_RELEASE
        run: |
          gem install liquid-cli
          DARWIN_URL="https://github.com/$GITHUB_REPOSITORY/releases/download/${{ steps.is-release.outputs.VERSION }}/marathon-cloud-v${{ steps.is-release.outputs.VERSION }}-universal-apple-darwin.tar.gz"
          LINUX_AMD64_URL="https://github.com/$GITHUB_REPOSITORY/releases/download/${{ steps.is-release.outputs.VERSION }}/marathon-cloud-v${{ steps.is-release.outputs.VERSION }}-x86_64-unknown-linux-gnu.tar.gz"
          LINUX_ARM64_URL="https://github.com/$GITHUB_REPOSITORY/releases/download/${{ steps.is-release.outputs.VERSION }}/marathon-cloud-v${{ steps.is-release.outputs.VERSION }}-aarch64-unknown-linux-gnu.tar.gz"
          LINUX_ARM_URL="https://github.com/$GITHUB_REPOSITORY/releases/download/${{ steps.is-release.outputs.VERSION }}/marathon-cloud-v${{ steps.is-release.outputs.VERSION }}-arm-unknown-linux-gnueabihf.tar.gz"
          DARWIN_SHA256=$(curl -L --retry 5 --retry-max-time 120 $DARWIN_URL | sha256sum | sed 's/  -//')
          LINUX_AMD64_SHA256=$(curl -L --retry 5 --retry-max-time 120 $LINUX_AMD64_URL | sha256sum | sed 's/  -//')
          LINUX_ARM64_SHA256=$(curl -L --retry 5 --retry-max-time 120 $LINUX_ARM64_URL | sha256sum | sed 's/  -//')
          LINUX_ARM_SHA256=$(curl -L --retry 5 --retry-max-time 120 $LINUX_ARM_URL | sha256sum | sed 's/  -//')
          echo "{\"version\":\"${{ steps.is-release.outputs.VERSION }}\",\"darwin\":{\"url\":\"$DARWIN_URL\",\"sha256\":\"$DARWIN_SHA256\"},\"linux\":{\"amd64\":{\"url\":\"$LINUX_AMD64_URL\",\"sha256\":\"$LINUX_AMD64_SHA256\"},\"arm64\":{\"url\":\"$LINUX_ARM64_URL\",\"sha256\":\"$LINUX_ARM64_SHA256\"},\"arm\":{\"url\":\"$LINUX_ARM_URL\",\"sha256\":\"$LINUX_ARM_SHA256\"}}}" > .github/marathon-cloud.json
          cat .github/marathon-cloud.json | jq .
          cat .github/marathon-cloud.rb.liquid | liquid "$(< .github/marathon-cloud.json)" > homebrew-tap/Formula/marathon-cloud.rb
          ls homebrew-tap/Formula
          cat homebrew-tap/Formula/marathon-cloud.rb
          cd homebrew-tap
          git diff
          git config --global user.name 'Anton Malinskiy'
          git config --global user.email 'malinskiy@users.noreply.github.com'
          git commit -am "Brew formula update for marathon version ${{ steps.tag.outputs.tag }}"
          git push
  checksums:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Check for release
        id: is-release
        shell: bash
        run: |
          unset IS_RELEASE ; if [[ $GITHUB_REF =~ ^refs/tags/[0-9].* ]]; then IS_RELEASE='true' ; fi
          echo "IS_RELEASE=${IS_RELEASE}" >> $GITHUB_OUTPUT
          unset VERSION
          VERSION=$(echo $GITHUB_REF | cut -d / -f 3)
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
      - uses: robinraju/release-downloader@v1.9
        if: steps.is-release.outputs.IS_RELEASE
        with:
          tag: "${{ steps.is-release.outputs.VERSION }}"
          fileName: "*"
      - name: Generate checksum
        uses: jmgilman/actions-generate-checksum@v1
        if: steps.is-release.outputs.IS_RELEASE
        with:
          output: checksums.txt
          patterns: |
            *
      - name: Upload checksums
        uses: softprops/action-gh-release@v1
        if: steps.is-release.outputs.IS_RELEASE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            checksums.txt
